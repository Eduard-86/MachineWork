// Fill out your copyright notice in the Description page of Project Settings.

#pragma once

#include "CoreMinimal.h"
#include "Components/ActorComponent.h"
#include "Base_NRIProperty.generated.h"

/*
	Ну давай по порядку, что мы хотим.
	Главная цель это дать персонажу набор характеристик известных заранее.
	Известен именно набор а не значения. 

	Нам известно что у персонажей на карте будет несколько типов значений 

	2 значения статов 

		Характеристики 
			* Основные 
			* Второстепенные 
		Навыки 
			* Простые 
			* Сложные - сложные навыки можно реализовать с помашью мапы 
	
	И 3 изменяемых значений в процессе игры 
	
		Раны
		Очки брони - будет ли эта характеристика в персонаже пока не ясно 
		Урон оружия - будет ли эта характеристика в персонаже пока не ясно  

	А также стоит упомянуть что есть Таланты которые могут влиять на выше 
		перечисленые значения

	Ну и в конце нужно сказать что у все персонажей есть в распаряжении 
		очко дейстивия или два очка полудействий.
		Подсчёт действий мы можем также вести в этом классе, или завести 
			отдельный для не характеристик.
	
	==============

	Перечисленные значение уже могут дать нам более чёткую картину.
	А именно то что нам потребуется несколько отдельных компонентов, например. 

		* Ком. Характеристик и навыков
		* Ком. Инвентаря
			в котором будут хранится значения брони и урона оружия
			Или который будет передовать эти значения первому компоненту
		* Ком. Здоровья 
			который будет отслеживать хп героя и негативные эффекты 
				которые могут это здоровье убавить через N ходов 

	==============

	Также под конец нужно сделать замечание что в дальнейшем потребуются много виджетов.
	Которые помогут настроить персонажей как до игры так и непосредственно в ней.
	Кой факт нужно обязательно учитывать в дальнейшей разработке

	==============

	Все болие тонкие подробности будут описанны в конкретных компанентах

*/


UCLASS(config = Game, ClassGroup=(Custom), meta=(BlueprintSpawnableComponent) )
class MACHINEWORK_API UBase_NRIProperty : public UActorComponent
{
	GENERATED_BODY()

public:	
	// Sets default values for this component's properties
	UBase_NRIProperty();

protected:
	// Called when the game starts
	virtual void BeginPlay() override;

public:	
	// Called every frame
	virtual void TickComponent(float DeltaTime, ELevelTick TickType, FActorComponentTickFunction* ThisTickFunction) override;

		
};
